{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","topText","bottomText","defImg","imagesGen","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randImgGen","url","onSubmit","type","placeholder","onChange","className","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,kC,mJCiF5BC,G,wBA5Ed,aAAc,IAAD,8BACX,+CAEKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,OAAQ,mCACRC,UAAW,IAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVT,E,iFAaO,IAAD,OACjBE,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAC,GAAa,IACVE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CACbV,UAAWQ,S,mCAMHG,GAAO,IAAD,EACGA,EAAMC,OAApBC,EADW,EACXA,KAAKC,EADM,EACNA,MACZC,KAAKL,SAAL,eACGG,EAAOC,M,mCAICH,GACXA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,UAAUqB,QAC1DC,EAAaP,KAAKnB,MAAMI,UAAUiB,GAASM,IACjDR,KAAKL,SAAS,CACZX,OAAQuB,M,+BAKT,OACE,6BACC,6BACE,0BAAME,SAAUT,KAAKZ,cACnB,2BACAsB,KAAO,OACPC,YAAc,WACdb,KAAO,UACPc,SAAYZ,KAAKd,aACjBa,MAASC,KAAKnB,MAAMC,UAEpB,2BACA4B,KAAO,OACPC,YAAc,cACdb,KAAO,aACPc,SAAYZ,KAAKd,aACjBa,MAASC,KAAKnB,MAAME,aAEpB,8CAGE,yBAAK8B,UAAU,aACb,yBAAKC,IAAMd,KAAKnB,MAAMG,OAAQ+B,IAAI,WACpC,yBAAKF,UAAU,QACf,wBAAIA,UAAU,OAAOb,KAAKnB,MAAMC,SAChC,wBAAI+B,UAAU,UAAUb,KAAKnB,MAAME,mB,GApE7BiC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fcb8f52e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n constructor(){\n   super()\n\n   this.state = {\n     topText: \"\",\n     bottomText: \"\",\n     defImg: \"https://i.imgflip.com/1ur9b0.jpg\",\n     imagesGen: []\n   }\n   this.handleChange = this.handleChange.bind(this)\n   this.handleSubmit = this.handleSubmit.bind(this)\n }\n\n componentDidMount(){\n   fetch('https://api.imgflip.com/get_memes')\n   .then(response=> response.json())\n   .then(response => {\n     const {memes} = response.data\n     this.setState({\n      imagesGen: memes\n     })\n   })\n }\n\n\n handleChange(event){\n  const {name,value} = event.target\n  this.setState({\n    [name]: value\n  })\n }\n\nhandleSubmit(event){\n  event.preventDefault()\n  const randNum = Math.floor(Math.random() * this.state.imagesGen.length)\n  const randImgGen = this.state.imagesGen[randNum].url\n  this.setState({\n    defImg: randImgGen\n  })\n}\n\n render(){\n   return (\n     <div>\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input \n          type = \"text\"\n          placeholder = \"Top Text\"\n          name = \"topText\"\n          onChange = {this.handleChange}\n          value = {this.state.topText}\n          />\n          <input \n          type = \"text\"\n          placeholder = \"Bottom Text\"\n          name = \"bottomText\"\n          onChange = {this.handleChange}\n          value = {this.state.bottomText}\n          />\n          <button>Generate</button>\n        </form>\n      </div>\n            <div className=\"container\">\n              <img src= {this.state.defImg} alt=\"tester\" />\n            <div className=\"text\">\n            <h2 className=\"top\">{this.state.topText}</h2>\n            <h2 className=\"bottom\">{this.state.bottomText}</h2>\n            </div>\n            </div>\n      </div>\n   )\n }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}